//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = module.exports = {};
ttypes.TModuleInfo = {
'PROXY_SERVER' : 2,
'JAVA_CLIENT' : 3
};
ttypes.TVerifyError = {
'INVALID_KVSTORE_Name' : 1,
'INVALID_KVSTORE_HelperHosts' : 2,
'INVALID_KVSTORE_ReadZones' : 3,
'INVALID_KVSTORE_RequestTimeoutMs' : 4,
'INVALID_KVSTORE_SecurityProperties' : 5,
'INVALID_KVSTORE_SocketOpenTimeoutMs' : 6,
'INVALID_KVSTORE_SocketReadTimeoutMs' : 7
};
ttypes.TSyncPolicy = {
'NO_SYNC' : 1,
'SYNC' : 2,
'WRITE_NO_SYNC' : 3
};
ttypes.TReplicaAckPolicy = {
'ALL' : 1,
'NONE' : 2,
'SIMPLE_MAJORITY' : 3
};
ttypes.TReturnChoice = {
'ALL' : 1,
'NONE' : 2,
'VALUE' : 3,
'VERSION' : 4
};
ttypes.TConsistency = {
'ABSOLUTE' : 1,
'NONE_REQUIRED' : 2,
'NONE_REQUIRED_NO_MASTER' : 3
};
TVerifyProperties = module.exports.TVerifyProperties = function(args) {
  this.kvStoreName = null;
  this.kvStoreHelperHosts = null;
  this.kvStoreReadZones = null;
  this.kvStoreRequestTimeoutMs = null;
  this.kvStoreSecurityProperties = null;
  this.kvStoreSocketOpenTimeoutMs = null;
  this.kvStoreSocketReadTimeoutMs = null;
  if (args) {
    if (args.kvStoreName !== undefined) {
      this.kvStoreName = args.kvStoreName;
    }
    if (args.kvStoreHelperHosts !== undefined) {
      this.kvStoreHelperHosts = args.kvStoreHelperHosts;
    }
    if (args.kvStoreReadZones !== undefined) {
      this.kvStoreReadZones = args.kvStoreReadZones;
    }
    if (args.kvStoreRequestTimeoutMs !== undefined) {
      this.kvStoreRequestTimeoutMs = args.kvStoreRequestTimeoutMs;
    }
    if (args.kvStoreSecurityProperties !== undefined) {
      this.kvStoreSecurityProperties = args.kvStoreSecurityProperties;
    }
    if (args.kvStoreSocketOpenTimeoutMs !== undefined) {
      this.kvStoreSocketOpenTimeoutMs = args.kvStoreSocketOpenTimeoutMs;
    }
    if (args.kvStoreSocketReadTimeoutMs !== undefined) {
      this.kvStoreSocketReadTimeoutMs = args.kvStoreSocketReadTimeoutMs;
    }
  }
};
TVerifyProperties.prototype = {};
TVerifyProperties.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.kvStoreName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.kvStoreHelperHosts = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.kvStoreHelperHosts.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.kvStoreReadZones = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readString();
          this.kvStoreReadZones.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.kvStoreRequestTimeoutMs = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size14 = 0;
        var _rtmp318;
        this.kvStoreSecurityProperties = {};
        var _ktype15 = 0;
        var _vtype16 = 0;
        _rtmp318 = input.readMapBegin();
        _ktype15 = _rtmp318.ktype;
        _vtype16 = _rtmp318.vtype;
        _size14 = _rtmp318.size;
        for (var _i19 = 0; _i19 < _size14; ++_i19)
        {
          var key20 = null;
          var val21 = null;
          key20 = input.readString();
          val21 = input.readString();
          this.kvStoreSecurityProperties[key20] = val21;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.kvStoreSocketOpenTimeoutMs = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.kvStoreSocketReadTimeoutMs = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TVerifyProperties.prototype.write = function(output) {
  output.writeStructBegin('TVerifyProperties');
  if (this.kvStoreName !== null && this.kvStoreName !== undefined) {
    output.writeFieldBegin('kvStoreName', Thrift.Type.STRING, 1);
    output.writeString(this.kvStoreName);
    output.writeFieldEnd();
  }
  if (this.kvStoreHelperHosts !== null && this.kvStoreHelperHosts !== undefined) {
    output.writeFieldBegin('kvStoreHelperHosts', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.kvStoreHelperHosts.length);
    for (var iter22 in this.kvStoreHelperHosts)
    {
      if (this.kvStoreHelperHosts.hasOwnProperty(iter22))
      {
        iter22 = this.kvStoreHelperHosts[iter22];
        output.writeString(iter22);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.kvStoreReadZones !== null && this.kvStoreReadZones !== undefined) {
    output.writeFieldBegin('kvStoreReadZones', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.kvStoreReadZones.length);
    for (var iter23 in this.kvStoreReadZones)
    {
      if (this.kvStoreReadZones.hasOwnProperty(iter23))
      {
        iter23 = this.kvStoreReadZones[iter23];
        output.writeString(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.kvStoreRequestTimeoutMs !== null && this.kvStoreRequestTimeoutMs !== undefined) {
    output.writeFieldBegin('kvStoreRequestTimeoutMs', Thrift.Type.I64, 4);
    output.writeI64(this.kvStoreRequestTimeoutMs);
    output.writeFieldEnd();
  }
  if (this.kvStoreSecurityProperties !== null && this.kvStoreSecurityProperties !== undefined) {
    output.writeFieldBegin('kvStoreSecurityProperties', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.kvStoreSecurityProperties));
    for (var kiter24 in this.kvStoreSecurityProperties)
    {
      if (this.kvStoreSecurityProperties.hasOwnProperty(kiter24))
      {
        var viter25 = this.kvStoreSecurityProperties[kiter24];
        output.writeString(kiter24);
        output.writeString(viter25);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.kvStoreSocketOpenTimeoutMs !== null && this.kvStoreSocketOpenTimeoutMs !== undefined) {
    output.writeFieldBegin('kvStoreSocketOpenTimeoutMs', Thrift.Type.I64, 6);
    output.writeI64(this.kvStoreSocketOpenTimeoutMs);
    output.writeFieldEnd();
  }
  if (this.kvStoreSocketReadTimeoutMs !== null && this.kvStoreSocketReadTimeoutMs !== undefined) {
    output.writeFieldBegin('kvStoreSocketReadTimeoutMs', Thrift.Type.I64, 7);
    output.writeI64(this.kvStoreSocketReadTimeoutMs);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TVerifyResult = module.exports.TVerifyResult = function(args) {
  this.isConnected = null;
  this.errorType = null;
  this.message = null;
  if (args) {
    if (args.isConnected !== undefined) {
      this.isConnected = args.isConnected;
    }
    if (args.errorType !== undefined) {
      this.errorType = args.errorType;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
TVerifyResult.prototype = {};
TVerifyResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.isConnected = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.errorType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TVerifyResult.prototype.write = function(output) {
  output.writeStructBegin('TVerifyResult');
  if (this.isConnected !== null && this.isConnected !== undefined) {
    output.writeFieldBegin('isConnected', Thrift.Type.BOOL, 1);
    output.writeBool(this.isConnected);
    output.writeFieldEnd();
  }
  if (this.errorType !== null && this.errorType !== undefined) {
    output.writeFieldBegin('errorType', Thrift.Type.I32, 2);
    output.writeI32(this.errorType);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 3);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TDurability = module.exports.TDurability = function(args) {
  this.masterSync = null;
  this.replicaAck = null;
  this.replicaSync = null;
  if (args) {
    if (args.masterSync !== undefined) {
      this.masterSync = args.masterSync;
    }
    if (args.replicaAck !== undefined) {
      this.replicaAck = args.replicaAck;
    }
    if (args.replicaSync !== undefined) {
      this.replicaSync = args.replicaSync;
    }
  }
};
TDurability.prototype = {};
TDurability.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.masterSync = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.replicaAck = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.replicaSync = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TDurability.prototype.write = function(output) {
  output.writeStructBegin('TDurability');
  if (this.masterSync !== null && this.masterSync !== undefined) {
    output.writeFieldBegin('masterSync', Thrift.Type.I32, 1);
    output.writeI32(this.masterSync);
    output.writeFieldEnd();
  }
  if (this.replicaAck !== null && this.replicaAck !== undefined) {
    output.writeFieldBegin('replicaAck', Thrift.Type.I32, 2);
    output.writeI32(this.replicaAck);
    output.writeFieldEnd();
  }
  if (this.replicaSync !== null && this.replicaSync !== undefined) {
    output.writeFieldBegin('replicaSync', Thrift.Type.I32, 3);
    output.writeI32(this.replicaSync);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TWriteOptions = module.exports.TWriteOptions = function(args) {
  this.durability = null;
  this.timeoutMs = null;
  this.returnChoice = null;
  if (args) {
    if (args.durability !== undefined) {
      this.durability = args.durability;
    }
    if (args.timeoutMs !== undefined) {
      this.timeoutMs = args.timeoutMs;
    }
    if (args.returnChoice !== undefined) {
      this.returnChoice = args.returnChoice;
    }
  }
};
TWriteOptions.prototype = {};
TWriteOptions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.durability = new ttypes.TDurability();
        this.durability.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.timeoutMs = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.returnChoice = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TWriteOptions.prototype.write = function(output) {
  output.writeStructBegin('TWriteOptions');
  if (this.durability !== null && this.durability !== undefined) {
    output.writeFieldBegin('durability', Thrift.Type.STRUCT, 1);
    this.durability.write(output);
    output.writeFieldEnd();
  }
  if (this.timeoutMs !== null && this.timeoutMs !== undefined) {
    output.writeFieldBegin('timeoutMs', Thrift.Type.I64, 2);
    output.writeI64(this.timeoutMs);
    output.writeFieldEnd();
  }
  if (this.returnChoice !== null && this.returnChoice !== undefined) {
    output.writeFieldBegin('returnChoice', Thrift.Type.I32, 3);
    output.writeI32(this.returnChoice);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TReadOptions = module.exports.TReadOptions = function(args) {
  this.consistency = null;
  this.timeoutMs = null;
  if (args) {
    if (args.consistency !== undefined) {
      this.consistency = args.consistency;
    }
    if (args.timeoutMs !== undefined) {
      this.timeoutMs = args.timeoutMs;
    }
  }
};
TReadOptions.prototype = {};
TReadOptions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.consistency = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.timeoutMs = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TReadOptions.prototype.write = function(output) {
  output.writeStructBegin('TReadOptions');
  if (this.consistency !== null && this.consistency !== undefined) {
    output.writeFieldBegin('consistency', Thrift.Type.I32, 1);
    output.writeI32(this.consistency);
    output.writeFieldEnd();
  }
  if (this.timeoutMs !== null && this.timeoutMs !== undefined) {
    output.writeFieldBegin('timeoutMs', Thrift.Type.I64, 2);
    output.writeI64(this.timeoutMs);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TRow = module.exports.TRow = function(args) {
  this.jsonRow = null;
  if (args) {
    if (args.jsonRow !== undefined) {
      this.jsonRow = args.jsonRow;
    }
  }
};
TRow.prototype = {};
TRow.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.jsonRow = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TRow.prototype.write = function(output) {
  output.writeStructBegin('TRow');
  if (this.jsonRow !== null && this.jsonRow !== undefined) {
    output.writeFieldBegin('jsonRow', Thrift.Type.STRING, 1);
    output.writeString(this.jsonRow);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TWriteResult = module.exports.TWriteResult = function(args) {
  this.currentRowVersion = null;
  this.previousRow = null;
  this.previousRowVersion = null;
  this.wasDeleted = null;
  if (args) {
    if (args.currentRowVersion !== undefined) {
      this.currentRowVersion = args.currentRowVersion;
    }
    if (args.previousRow !== undefined) {
      this.previousRow = args.previousRow;
    }
    if (args.previousRowVersion !== undefined) {
      this.previousRowVersion = args.previousRowVersion;
    }
    if (args.wasDeleted !== undefined) {
      this.wasDeleted = args.wasDeleted;
    }
  }
};
TWriteResult.prototype = {};
TWriteResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.currentRowVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.previousRow = new ttypes.TRow();
        this.previousRow.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.previousRowVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.wasDeleted = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TWriteResult.prototype.write = function(output) {
  output.writeStructBegin('TWriteResult');
  if (this.currentRowVersion !== null && this.currentRowVersion !== undefined) {
    output.writeFieldBegin('currentRowVersion', Thrift.Type.STRING, 1);
    output.writeString(this.currentRowVersion);
    output.writeFieldEnd();
  }
  if (this.previousRow !== null && this.previousRow !== undefined) {
    output.writeFieldBegin('previousRow', Thrift.Type.STRUCT, 2);
    this.previousRow.write(output);
    output.writeFieldEnd();
  }
  if (this.previousRowVersion !== null && this.previousRowVersion !== undefined) {
    output.writeFieldBegin('previousRowVersion', Thrift.Type.STRING, 3);
    output.writeString(this.previousRowVersion);
    output.writeFieldEnd();
  }
  if (this.wasDeleted !== null && this.wasDeleted !== undefined) {
    output.writeFieldBegin('wasDeleted', Thrift.Type.BOOL, 4);
    output.writeBool(this.wasDeleted);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetResult = module.exports.TGetResult = function(args) {
  this.currentRow = null;
  this.currentRowVersion = null;
  if (args) {
    if (args.currentRow !== undefined) {
      this.currentRow = args.currentRow;
    }
    if (args.currentRowVersion !== undefined) {
      this.currentRowVersion = args.currentRowVersion;
    }
  }
};
TGetResult.prototype = {};
TGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.currentRow = new ttypes.TRow();
        this.currentRow.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.currentRowVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetResult.prototype.write = function(output) {
  output.writeStructBegin('TGetResult');
  if (this.currentRow !== null && this.currentRow !== undefined) {
    output.writeFieldBegin('currentRow', Thrift.Type.STRUCT, 1);
    this.currentRow.write(output);
    output.writeFieldEnd();
  }
  if (this.currentRowVersion !== null && this.currentRowVersion !== undefined) {
    output.writeFieldBegin('currentRowVersion', Thrift.Type.STRING, 2);
    output.writeString(this.currentRowVersion);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TFieldRange = module.exports.TFieldRange = function(args) {
  this.fieldName = null;
  this.startValue = null;
  this.startIsInclusive = null;
  this.endValue = null;
  this.endIsInclusive = null;
  if (args) {
    if (args.fieldName !== undefined) {
      this.fieldName = args.fieldName;
    }
    if (args.startValue !== undefined) {
      this.startValue = args.startValue;
    }
    if (args.startIsInclusive !== undefined) {
      this.startIsInclusive = args.startIsInclusive;
    }
    if (args.endValue !== undefined) {
      this.endValue = args.endValue;
    }
    if (args.endIsInclusive !== undefined) {
      this.endIsInclusive = args.endIsInclusive;
    }
  }
};
TFieldRange.prototype = {};
TFieldRange.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fieldName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.startValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.startIsInclusive = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.endValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.endIsInclusive = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TFieldRange.prototype.write = function(output) {
  output.writeStructBegin('TFieldRange');
  if (this.fieldName !== null && this.fieldName !== undefined) {
    output.writeFieldBegin('fieldName', Thrift.Type.STRING, 1);
    output.writeString(this.fieldName);
    output.writeFieldEnd();
  }
  if (this.startValue !== null && this.startValue !== undefined) {
    output.writeFieldBegin('startValue', Thrift.Type.STRING, 2);
    output.writeString(this.startValue);
    output.writeFieldEnd();
  }
  if (this.startIsInclusive !== null && this.startIsInclusive !== undefined) {
    output.writeFieldBegin('startIsInclusive', Thrift.Type.BOOL, 3);
    output.writeBool(this.startIsInclusive);
    output.writeFieldEnd();
  }
  if (this.endValue !== null && this.endValue !== undefined) {
    output.writeFieldBegin('endValue', Thrift.Type.STRING, 4);
    output.writeString(this.endValue);
    output.writeFieldEnd();
  }
  if (this.endIsInclusive !== null && this.endIsInclusive !== undefined) {
    output.writeFieldBegin('endIsInclusive', Thrift.Type.BOOL, 5);
    output.writeBool(this.endIsInclusive);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TRowAndMetadata = module.exports.TRowAndMetadata = function(args) {
  this.jsonRow = null;
  this.rowVersion = null;
  this.tableId = null;
  if (args) {
    if (args.jsonRow !== undefined) {
      this.jsonRow = args.jsonRow;
    }
    if (args.rowVersion !== undefined) {
      this.rowVersion = args.rowVersion;
    }
    if (args.tableId !== undefined) {
      this.tableId = args.tableId;
    }
  }
};
TRowAndMetadata.prototype = {};
TRowAndMetadata.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.jsonRow = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.rowVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.tableId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TRowAndMetadata.prototype.write = function(output) {
  output.writeStructBegin('TRowAndMetadata');
  if (this.jsonRow !== null && this.jsonRow !== undefined) {
    output.writeFieldBegin('jsonRow', Thrift.Type.STRING, 1);
    output.writeString(this.jsonRow);
    output.writeFieldEnd();
  }
  if (this.rowVersion !== null && this.rowVersion !== undefined) {
    output.writeFieldBegin('rowVersion', Thrift.Type.STRING, 2);
    output.writeString(this.rowVersion);
    output.writeFieldEnd();
  }
  if (this.tableId !== null && this.tableId !== undefined) {
    output.writeFieldBegin('tableId', Thrift.Type.I32, 3);
    output.writeI32(this.tableId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TMultiGetResult = module.exports.TMultiGetResult = function(args) {
  this.idToTableNames = null;
  this.rowsWithMetadata = null;
  if (args) {
    if (args.idToTableNames !== undefined) {
      this.idToTableNames = args.idToTableNames;
    }
    if (args.rowsWithMetadata !== undefined) {
      this.rowsWithMetadata = args.rowsWithMetadata;
    }
  }
};
TMultiGetResult.prototype = {};
TMultiGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size26 = 0;
        var _rtmp330;
        this.idToTableNames = {};
        var _ktype27 = 0;
        var _vtype28 = 0;
        _rtmp330 = input.readMapBegin();
        _ktype27 = _rtmp330.ktype;
        _vtype28 = _rtmp330.vtype;
        _size26 = _rtmp330.size;
        for (var _i31 = 0; _i31 < _size26; ++_i31)
        {
          var key32 = null;
          var val33 = null;
          key32 = input.readI32();
          val33 = input.readString();
          this.idToTableNames[key32] = val33;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size34 = 0;
        var _rtmp338;
        this.rowsWithMetadata = [];
        var _etype37 = 0;
        _rtmp338 = input.readListBegin();
        _etype37 = _rtmp338.etype;
        _size34 = _rtmp338.size;
        for (var _i39 = 0; _i39 < _size34; ++_i39)
        {
          var elem40 = null;
          elem40 = new ttypes.TRowAndMetadata();
          elem40.read(input);
          this.rowsWithMetadata.push(elem40);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TMultiGetResult.prototype.write = function(output) {
  output.writeStructBegin('TMultiGetResult');
  if (this.idToTableNames !== null && this.idToTableNames !== undefined) {
    output.writeFieldBegin('idToTableNames', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.idToTableNames));
    for (var kiter41 in this.idToTableNames)
    {
      if (this.idToTableNames.hasOwnProperty(kiter41))
      {
        var viter42 = this.idToTableNames[kiter41];
        output.writeI32(kiter41);
        output.writeString(viter42);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.rowsWithMetadata !== null && this.rowsWithMetadata !== undefined) {
    output.writeFieldBegin('rowsWithMetadata', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.rowsWithMetadata.length);
    for (var iter43 in this.rowsWithMetadata)
    {
      if (this.rowsWithMetadata.hasOwnProperty(iter43))
      {
        iter43 = this.rowsWithMetadata[iter43];
        iter43.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TDurabilityException = module.exports.TDurabilityException = function(args) {
  Thrift.TException.call(this, "TDurabilityException")
  this.name = "TDurabilityException"
  this.availableReplicas = null;
  this.commitPolicy = null;
  this.requiredNodeCount = null;
  if (args) {
    if (args.availableReplicas !== undefined) {
      this.availableReplicas = args.availableReplicas;
    }
    if (args.commitPolicy !== undefined) {
      this.commitPolicy = args.commitPolicy;
    }
    if (args.requiredNodeCount !== undefined) {
      this.requiredNodeCount = args.requiredNodeCount;
    }
  }
};
Thrift.inherits(TDurabilityException, Thrift.TException);
TDurabilityException.prototype.name = 'TDurabilityException';
TDurabilityException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size44 = 0;
        var _rtmp348;
        this.availableReplicas = [];
        var _etype47 = 0;
        _rtmp348 = input.readListBegin();
        _etype47 = _rtmp348.etype;
        _size44 = _rtmp348.size;
        for (var _i49 = 0; _i49 < _size44; ++_i49)
        {
          var elem50 = null;
          elem50 = input.readString();
          this.availableReplicas.push(elem50);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.commitPolicy = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.requiredNodeCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TDurabilityException.prototype.write = function(output) {
  output.writeStructBegin('TDurabilityException');
  if (this.availableReplicas !== null && this.availableReplicas !== undefined) {
    output.writeFieldBegin('availableReplicas', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.availableReplicas.length);
    for (var iter51 in this.availableReplicas)
    {
      if (this.availableReplicas.hasOwnProperty(iter51))
      {
        iter51 = this.availableReplicas[iter51];
        output.writeString(iter51);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.commitPolicy !== null && this.commitPolicy !== undefined) {
    output.writeFieldBegin('commitPolicy', Thrift.Type.I32, 2);
    output.writeI32(this.commitPolicy);
    output.writeFieldEnd();
  }
  if (this.requiredNodeCount !== null && this.requiredNodeCount !== undefined) {
    output.writeFieldBegin('requiredNodeCount', Thrift.Type.I32, 3);
    output.writeI32(this.requiredNodeCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TRequestTimeoutException = module.exports.TRequestTimeoutException = function(args) {
  Thrift.TException.call(this, "TRequestTimeoutException")
  this.name = "TRequestTimeoutException"
  this.message = null;
  this.timeoutMs = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
    if (args.timeoutMs !== undefined) {
      this.timeoutMs = args.timeoutMs;
    }
  }
};
Thrift.inherits(TRequestTimeoutException, Thrift.TException);
TRequestTimeoutException.prototype.name = 'TRequestTimeoutException';
TRequestTimeoutException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.timeoutMs = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TRequestTimeoutException.prototype.write = function(output) {
  output.writeStructBegin('TRequestTimeoutException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.timeoutMs !== null && this.timeoutMs !== undefined) {
    output.writeFieldBegin('timeoutMs', Thrift.Type.I64, 2);
    output.writeI64(this.timeoutMs);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TFaultException = module.exports.TFaultException = function(args) {
  Thrift.TException.call(this, "TFaultException")
  this.name = "TFaultException"
  this.faultClassName = null;
  this.remoteStackTrace = null;
  this.wasLoggedRemotely = null;
  if (args) {
    if (args.faultClassName !== undefined) {
      this.faultClassName = args.faultClassName;
    }
    if (args.remoteStackTrace !== undefined) {
      this.remoteStackTrace = args.remoteStackTrace;
    }
    if (args.wasLoggedRemotely !== undefined) {
      this.wasLoggedRemotely = args.wasLoggedRemotely;
    }
  }
};
Thrift.inherits(TFaultException, Thrift.TException);
TFaultException.prototype.name = 'TFaultException';
TFaultException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.faultClassName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.remoteStackTrace = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.wasLoggedRemotely = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TFaultException.prototype.write = function(output) {
  output.writeStructBegin('TFaultException');
  if (this.faultClassName !== null && this.faultClassName !== undefined) {
    output.writeFieldBegin('faultClassName', Thrift.Type.STRING, 1);
    output.writeString(this.faultClassName);
    output.writeFieldEnd();
  }
  if (this.remoteStackTrace !== null && this.remoteStackTrace !== undefined) {
    output.writeFieldBegin('remoteStackTrace', Thrift.Type.STRING, 2);
    output.writeString(this.remoteStackTrace);
    output.writeFieldEnd();
  }
  if (this.wasLoggedRemotely !== null && this.wasLoggedRemotely !== undefined) {
    output.writeFieldBegin('wasLoggedRemotely', Thrift.Type.BOOL, 3);
    output.writeBool(this.wasLoggedRemotely);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TConsistencyException = module.exports.TConsistencyException = function(args) {
  Thrift.TException.call(this, "TConsistencyException")
  this.name = "TConsistencyException"
  this.consistencyPolicy = null;
  if (args) {
    if (args.consistencyPolicy !== undefined) {
      this.consistencyPolicy = args.consistencyPolicy;
    }
  }
};
Thrift.inherits(TConsistencyException, Thrift.TException);
TConsistencyException.prototype.name = 'TConsistencyException';
TConsistencyException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.consistencyPolicy = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TConsistencyException.prototype.write = function(output) {
  output.writeStructBegin('TConsistencyException');
  if (this.consistencyPolicy !== null && this.consistencyPolicy !== undefined) {
    output.writeFieldBegin('consistencyPolicy', Thrift.Type.I32, 1);
    output.writeI32(this.consistencyPolicy);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TIllegalArgumentException = module.exports.TIllegalArgumentException = function(args) {
  Thrift.TException.call(this, "TIllegalArgumentException")
  this.name = "TIllegalArgumentException"
  this.message = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(TIllegalArgumentException, Thrift.TException);
TIllegalArgumentException.prototype.name = 'TIllegalArgumentException';
TIllegalArgumentException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TIllegalArgumentException.prototype.write = function(output) {
  output.writeStructBegin('TIllegalArgumentException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TUnverifiedConnectionException = module.exports.TUnverifiedConnectionException = function(args) {
  Thrift.TException.call(this, "TUnverifiedConnectionException")
  this.name = "TUnverifiedConnectionException"
  this.message = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(TUnverifiedConnectionException, Thrift.TException);
TUnverifiedConnectionException.prototype.name = 'TUnverifiedConnectionException';
TUnverifiedConnectionException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TUnverifiedConnectionException.prototype.write = function(output) {
  output.writeStructBegin('TUnverifiedConnectionException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TProxyException = module.exports.TProxyException = function(args) {
  Thrift.TException.call(this, "TProxyException")
  this.name = "TProxyException"
  this.message = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(TProxyException, Thrift.TException);
TProxyException.prototype.name = 'TProxyException';
TProxyException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TProxyException.prototype.write = function(output) {
  output.writeStructBegin('TProxyException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

