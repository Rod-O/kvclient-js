//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./ondb_types');
//HELPER FUNCTIONS AND STRUCTURES

ONDB_ping_args = function(args) {
};
ONDB_ping_args.prototype = {};
ONDB_ping_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_ping_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_ping_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ONDB_ping_result = function(args) {
};
ONDB_ping_result.prototype = {};
ONDB_ping_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_ping_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_ping_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ONDB_version_args = function(args) {
  this.whichModule = null;
  if (args) {
    if (args.whichModule !== undefined) {
      this.whichModule = args.whichModule;
    }
  }
};
ONDB_version_args.prototype = {};
ONDB_version_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.whichModule = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_version_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_version_args');
  if (this.whichModule !== null && this.whichModule !== undefined) {
    output.writeFieldBegin('whichModule', Thrift.Type.I32, 1);
    output.writeI32(this.whichModule);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ONDB_version_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ONDB_version_result.prototype = {};
ONDB_version_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_version_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_version_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ONDB_status_args = function(args) {
  this.whichModule = null;
  if (args) {
    if (args.whichModule !== undefined) {
      this.whichModule = args.whichModule;
    }
  }
};
ONDB_status_args.prototype = {};
ONDB_status_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.whichModule = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_status_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_status_args');
  if (this.whichModule !== null && this.whichModule !== undefined) {
    output.writeFieldBegin('whichModule', Thrift.Type.I32, 1);
    output.writeI32(this.whichModule);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ONDB_status_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ONDB_status_result.prototype = {};
ONDB_status_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_status_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_status_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ONDB_shutdown_args = function(args) {
};
ONDB_shutdown_args.prototype = {};
ONDB_shutdown_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_shutdown_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_shutdown_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ONDB_shutdown_result = function(args) {
};
ONDB_shutdown_result.prototype = {};
ONDB_shutdown_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_shutdown_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_shutdown_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ONDB_verify_args = function(args) {
  this.properties = null;
  if (args) {
    if (args.properties !== undefined) {
      this.properties = args.properties;
    }
  }
};
ONDB_verify_args.prototype = {};
ONDB_verify_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.properties = new ttypes.TVerifyProperties();
        this.properties.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_verify_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_verify_args');
  if (this.properties !== null && this.properties !== undefined) {
    output.writeFieldBegin('properties', Thrift.Type.STRUCT, 1);
    this.properties.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ONDB_verify_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ONDB_verify_result.prototype = {};
ONDB_verify_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TVerifyResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_verify_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_verify_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ONDB_put_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.writeOptions = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.writeOptions !== undefined) {
      this.writeOptions = args.writeOptions;
    }
  }
};
ONDB_put_args.prototype = {};
ONDB_put_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.row = new ttypes.TRow();
        this.row.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.writeOptions = new ttypes.TWriteOptions();
        this.writeOptions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_put_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_put_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRUCT, 2);
    this.row.write(output);
    output.writeFieldEnd();
  }
  if (this.writeOptions !== null && this.writeOptions !== undefined) {
    output.writeFieldBegin('writeOptions', Thrift.Type.STRUCT, 3);
    this.writeOptions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ONDB_put_result = function(args) {
  this.success = null;
  this.de = null;
  this.re = null;
  this.fe = null;
  this.uvce = null;
  this.pe = null;
  this.iae = null;
  if (args instanceof ttypes.TDurabilityException) {
    this.de = args;
    return;
  }
  if (args instanceof ttypes.TRequestTimeoutException) {
    this.re = args;
    return;
  }
  if (args instanceof ttypes.TFaultException) {
    this.fe = args;
    return;
  }
  if (args instanceof ttypes.TUnverifiedConnectionException) {
    this.uvce = args;
    return;
  }
  if (args instanceof ttypes.TProxyException) {
    this.pe = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgumentException) {
    this.iae = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.de !== undefined) {
      this.de = args.de;
    }
    if (args.re !== undefined) {
      this.re = args.re;
    }
    if (args.fe !== undefined) {
      this.fe = args.fe;
    }
    if (args.uvce !== undefined) {
      this.uvce = args.uvce;
    }
    if (args.pe !== undefined) {
      this.pe = args.pe;
    }
    if (args.iae !== undefined) {
      this.iae = args.iae;
    }
  }
};
ONDB_put_result.prototype = {};
ONDB_put_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TWriteResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.de = new ttypes.TDurabilityException();
        this.de.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.re = new ttypes.TRequestTimeoutException();
        this.re.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.fe = new ttypes.TFaultException();
        this.fe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.uvce = new ttypes.TUnverifiedConnectionException();
        this.uvce.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new ttypes.TProxyException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.iae = new ttypes.TIllegalArgumentException();
        this.iae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_put_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_put_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.de !== null && this.de !== undefined) {
    output.writeFieldBegin('de', Thrift.Type.STRUCT, 1);
    this.de.write(output);
    output.writeFieldEnd();
  }
  if (this.re !== null && this.re !== undefined) {
    output.writeFieldBegin('re', Thrift.Type.STRUCT, 2);
    this.re.write(output);
    output.writeFieldEnd();
  }
  if (this.fe !== null && this.fe !== undefined) {
    output.writeFieldBegin('fe', Thrift.Type.STRUCT, 3);
    this.fe.write(output);
    output.writeFieldEnd();
  }
  if (this.uvce !== null && this.uvce !== undefined) {
    output.writeFieldBegin('uvce', Thrift.Type.STRUCT, 4);
    this.uvce.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 5);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  if (this.iae !== null && this.iae !== undefined) {
    output.writeFieldBegin('iae', Thrift.Type.STRUCT, 6);
    this.iae.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ONDB_putIfAbsent_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.writeOptions = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.writeOptions !== undefined) {
      this.writeOptions = args.writeOptions;
    }
  }
};
ONDB_putIfAbsent_args.prototype = {};
ONDB_putIfAbsent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.row = new ttypes.TRow();
        this.row.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.writeOptions = new ttypes.TWriteOptions();
        this.writeOptions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_putIfAbsent_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_putIfAbsent_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRUCT, 2);
    this.row.write(output);
    output.writeFieldEnd();
  }
  if (this.writeOptions !== null && this.writeOptions !== undefined) {
    output.writeFieldBegin('writeOptions', Thrift.Type.STRUCT, 3);
    this.writeOptions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ONDB_putIfAbsent_result = function(args) {
  this.success = null;
  this.de = null;
  this.re = null;
  this.fe = null;
  this.uvce = null;
  this.pe = null;
  this.iae = null;
  if (args instanceof ttypes.TDurabilityException) {
    this.de = args;
    return;
  }
  if (args instanceof ttypes.TRequestTimeoutException) {
    this.re = args;
    return;
  }
  if (args instanceof ttypes.TFaultException) {
    this.fe = args;
    return;
  }
  if (args instanceof ttypes.TUnverifiedConnectionException) {
    this.uvce = args;
    return;
  }
  if (args instanceof ttypes.TProxyException) {
    this.pe = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgumentException) {
    this.iae = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.de !== undefined) {
      this.de = args.de;
    }
    if (args.re !== undefined) {
      this.re = args.re;
    }
    if (args.fe !== undefined) {
      this.fe = args.fe;
    }
    if (args.uvce !== undefined) {
      this.uvce = args.uvce;
    }
    if (args.pe !== undefined) {
      this.pe = args.pe;
    }
    if (args.iae !== undefined) {
      this.iae = args.iae;
    }
  }
};
ONDB_putIfAbsent_result.prototype = {};
ONDB_putIfAbsent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TWriteResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.de = new ttypes.TDurabilityException();
        this.de.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.re = new ttypes.TRequestTimeoutException();
        this.re.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.fe = new ttypes.TFaultException();
        this.fe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.uvce = new ttypes.TUnverifiedConnectionException();
        this.uvce.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new ttypes.TProxyException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.iae = new ttypes.TIllegalArgumentException();
        this.iae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_putIfAbsent_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_putIfAbsent_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.de !== null && this.de !== undefined) {
    output.writeFieldBegin('de', Thrift.Type.STRUCT, 1);
    this.de.write(output);
    output.writeFieldEnd();
  }
  if (this.re !== null && this.re !== undefined) {
    output.writeFieldBegin('re', Thrift.Type.STRUCT, 2);
    this.re.write(output);
    output.writeFieldEnd();
  }
  if (this.fe !== null && this.fe !== undefined) {
    output.writeFieldBegin('fe', Thrift.Type.STRUCT, 3);
    this.fe.write(output);
    output.writeFieldEnd();
  }
  if (this.uvce !== null && this.uvce !== undefined) {
    output.writeFieldBegin('uvce', Thrift.Type.STRUCT, 4);
    this.uvce.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 5);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  if (this.iae !== null && this.iae !== undefined) {
    output.writeFieldBegin('iae', Thrift.Type.STRUCT, 6);
    this.iae.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ONDB_putIfPresent_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.writeOptions = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.writeOptions !== undefined) {
      this.writeOptions = args.writeOptions;
    }
  }
};
ONDB_putIfPresent_args.prototype = {};
ONDB_putIfPresent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.row = new ttypes.TRow();
        this.row.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.writeOptions = new ttypes.TWriteOptions();
        this.writeOptions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_putIfPresent_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_putIfPresent_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRUCT, 2);
    this.row.write(output);
    output.writeFieldEnd();
  }
  if (this.writeOptions !== null && this.writeOptions !== undefined) {
    output.writeFieldBegin('writeOptions', Thrift.Type.STRUCT, 3);
    this.writeOptions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ONDB_putIfPresent_result = function(args) {
  this.success = null;
  this.de = null;
  this.re = null;
  this.fe = null;
  this.uvce = null;
  this.pe = null;
  this.iae = null;
  if (args instanceof ttypes.TDurabilityException) {
    this.de = args;
    return;
  }
  if (args instanceof ttypes.TRequestTimeoutException) {
    this.re = args;
    return;
  }
  if (args instanceof ttypes.TFaultException) {
    this.fe = args;
    return;
  }
  if (args instanceof ttypes.TUnverifiedConnectionException) {
    this.uvce = args;
    return;
  }
  if (args instanceof ttypes.TProxyException) {
    this.pe = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgumentException) {
    this.iae = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.de !== undefined) {
      this.de = args.de;
    }
    if (args.re !== undefined) {
      this.re = args.re;
    }
    if (args.fe !== undefined) {
      this.fe = args.fe;
    }
    if (args.uvce !== undefined) {
      this.uvce = args.uvce;
    }
    if (args.pe !== undefined) {
      this.pe = args.pe;
    }
    if (args.iae !== undefined) {
      this.iae = args.iae;
    }
  }
};
ONDB_putIfPresent_result.prototype = {};
ONDB_putIfPresent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TWriteResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.de = new ttypes.TDurabilityException();
        this.de.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.re = new ttypes.TRequestTimeoutException();
        this.re.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.fe = new ttypes.TFaultException();
        this.fe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.uvce = new ttypes.TUnverifiedConnectionException();
        this.uvce.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new ttypes.TProxyException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.iae = new ttypes.TIllegalArgumentException();
        this.iae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_putIfPresent_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_putIfPresent_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.de !== null && this.de !== undefined) {
    output.writeFieldBegin('de', Thrift.Type.STRUCT, 1);
    this.de.write(output);
    output.writeFieldEnd();
  }
  if (this.re !== null && this.re !== undefined) {
    output.writeFieldBegin('re', Thrift.Type.STRUCT, 2);
    this.re.write(output);
    output.writeFieldEnd();
  }
  if (this.fe !== null && this.fe !== undefined) {
    output.writeFieldBegin('fe', Thrift.Type.STRUCT, 3);
    this.fe.write(output);
    output.writeFieldEnd();
  }
  if (this.uvce !== null && this.uvce !== undefined) {
    output.writeFieldBegin('uvce', Thrift.Type.STRUCT, 4);
    this.uvce.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 5);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  if (this.iae !== null && this.iae !== undefined) {
    output.writeFieldBegin('iae', Thrift.Type.STRUCT, 6);
    this.iae.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ONDB_putIfVersion_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.matchVersion = null;
  this.writeOptions = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.matchVersion !== undefined) {
      this.matchVersion = args.matchVersion;
    }
    if (args.writeOptions !== undefined) {
      this.writeOptions = args.writeOptions;
    }
  }
};
ONDB_putIfVersion_args.prototype = {};
ONDB_putIfVersion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.row = new ttypes.TRow();
        this.row.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.matchVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.writeOptions = new ttypes.TWriteOptions();
        this.writeOptions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_putIfVersion_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_putIfVersion_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRUCT, 2);
    this.row.write(output);
    output.writeFieldEnd();
  }
  if (this.matchVersion !== null && this.matchVersion !== undefined) {
    output.writeFieldBegin('matchVersion', Thrift.Type.STRING, 3);
    output.writeString(this.matchVersion);
    output.writeFieldEnd();
  }
  if (this.writeOptions !== null && this.writeOptions !== undefined) {
    output.writeFieldBegin('writeOptions', Thrift.Type.STRUCT, 4);
    this.writeOptions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ONDB_putIfVersion_result = function(args) {
  this.success = null;
  this.de = null;
  this.re = null;
  this.fe = null;
  this.uvce = null;
  this.pe = null;
  this.iae = null;
  if (args instanceof ttypes.TDurabilityException) {
    this.de = args;
    return;
  }
  if (args instanceof ttypes.TRequestTimeoutException) {
    this.re = args;
    return;
  }
  if (args instanceof ttypes.TFaultException) {
    this.fe = args;
    return;
  }
  if (args instanceof ttypes.TUnverifiedConnectionException) {
    this.uvce = args;
    return;
  }
  if (args instanceof ttypes.TProxyException) {
    this.pe = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgumentException) {
    this.iae = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.de !== undefined) {
      this.de = args.de;
    }
    if (args.re !== undefined) {
      this.re = args.re;
    }
    if (args.fe !== undefined) {
      this.fe = args.fe;
    }
    if (args.uvce !== undefined) {
      this.uvce = args.uvce;
    }
    if (args.pe !== undefined) {
      this.pe = args.pe;
    }
    if (args.iae !== undefined) {
      this.iae = args.iae;
    }
  }
};
ONDB_putIfVersion_result.prototype = {};
ONDB_putIfVersion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TWriteResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.de = new ttypes.TDurabilityException();
        this.de.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.re = new ttypes.TRequestTimeoutException();
        this.re.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.fe = new ttypes.TFaultException();
        this.fe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.uvce = new ttypes.TUnverifiedConnectionException();
        this.uvce.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new ttypes.TProxyException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.iae = new ttypes.TIllegalArgumentException();
        this.iae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_putIfVersion_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_putIfVersion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.de !== null && this.de !== undefined) {
    output.writeFieldBegin('de', Thrift.Type.STRUCT, 1);
    this.de.write(output);
    output.writeFieldEnd();
  }
  if (this.re !== null && this.re !== undefined) {
    output.writeFieldBegin('re', Thrift.Type.STRUCT, 2);
    this.re.write(output);
    output.writeFieldEnd();
  }
  if (this.fe !== null && this.fe !== undefined) {
    output.writeFieldBegin('fe', Thrift.Type.STRUCT, 3);
    this.fe.write(output);
    output.writeFieldEnd();
  }
  if (this.uvce !== null && this.uvce !== undefined) {
    output.writeFieldBegin('uvce', Thrift.Type.STRUCT, 4);
    this.uvce.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 5);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  if (this.iae !== null && this.iae !== undefined) {
    output.writeFieldBegin('iae', Thrift.Type.STRUCT, 6);
    this.iae.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ONDB_get_args = function(args) {
  this.tableName = null;
  this.key = null;
  this.readOptions = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.readOptions !== undefined) {
      this.readOptions = args.readOptions;
    }
  }
};
ONDB_get_args.prototype = {};
ONDB_get_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.key = new ttypes.TRow();
        this.key.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.readOptions = new ttypes.TReadOptions();
        this.readOptions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_get_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_get_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRUCT, 2);
    this.key.write(output);
    output.writeFieldEnd();
  }
  if (this.readOptions !== null && this.readOptions !== undefined) {
    output.writeFieldBegin('readOptions', Thrift.Type.STRUCT, 3);
    this.readOptions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ONDB_get_result = function(args) {
  this.success = null;
  this.ce = null;
  this.re = null;
  this.fe = null;
  this.uvce = null;
  this.pe = null;
  this.iae = null;
  if (args instanceof ttypes.TConsistencyException) {
    this.ce = args;
    return;
  }
  if (args instanceof ttypes.TRequestTimeoutException) {
    this.re = args;
    return;
  }
  if (args instanceof ttypes.TFaultException) {
    this.fe = args;
    return;
  }
  if (args instanceof ttypes.TUnverifiedConnectionException) {
    this.uvce = args;
    return;
  }
  if (args instanceof ttypes.TProxyException) {
    this.pe = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgumentException) {
    this.iae = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ce !== undefined) {
      this.ce = args.ce;
    }
    if (args.re !== undefined) {
      this.re = args.re;
    }
    if (args.fe !== undefined) {
      this.fe = args.fe;
    }
    if (args.uvce !== undefined) {
      this.uvce = args.uvce;
    }
    if (args.pe !== undefined) {
      this.pe = args.pe;
    }
    if (args.iae !== undefined) {
      this.iae = args.iae;
    }
  }
};
ONDB_get_result.prototype = {};
ONDB_get_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TGetResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ce = new ttypes.TConsistencyException();
        this.ce.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.re = new ttypes.TRequestTimeoutException();
        this.re.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.fe = new ttypes.TFaultException();
        this.fe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.uvce = new ttypes.TUnverifiedConnectionException();
        this.uvce.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new ttypes.TProxyException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.iae = new ttypes.TIllegalArgumentException();
        this.iae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_get_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_get_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ce !== null && this.ce !== undefined) {
    output.writeFieldBegin('ce', Thrift.Type.STRUCT, 1);
    this.ce.write(output);
    output.writeFieldEnd();
  }
  if (this.re !== null && this.re !== undefined) {
    output.writeFieldBegin('re', Thrift.Type.STRUCT, 2);
    this.re.write(output);
    output.writeFieldEnd();
  }
  if (this.fe !== null && this.fe !== undefined) {
    output.writeFieldBegin('fe', Thrift.Type.STRUCT, 3);
    this.fe.write(output);
    output.writeFieldEnd();
  }
  if (this.uvce !== null && this.uvce !== undefined) {
    output.writeFieldBegin('uvce', Thrift.Type.STRUCT, 4);
    this.uvce.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 5);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  if (this.iae !== null && this.iae !== undefined) {
    output.writeFieldBegin('iae', Thrift.Type.STRUCT, 6);
    this.iae.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ONDB_deleteRow_args = function(args) {
  this.tableName = null;
  this.key = null;
  this.writeOptions = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.writeOptions !== undefined) {
      this.writeOptions = args.writeOptions;
    }
  }
};
ONDB_deleteRow_args.prototype = {};
ONDB_deleteRow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.key = new ttypes.TRow();
        this.key.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.writeOptions = new ttypes.TWriteOptions();
        this.writeOptions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_deleteRow_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_deleteRow_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRUCT, 2);
    this.key.write(output);
    output.writeFieldEnd();
  }
  if (this.writeOptions !== null && this.writeOptions !== undefined) {
    output.writeFieldBegin('writeOptions', Thrift.Type.STRUCT, 3);
    this.writeOptions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ONDB_deleteRow_result = function(args) {
  this.success = null;
  this.de = null;
  this.re = null;
  this.fe = null;
  this.uce = null;
  this.pe = null;
  this.iae = null;
  if (args instanceof ttypes.TDurabilityException) {
    this.de = args;
    return;
  }
  if (args instanceof ttypes.TRequestTimeoutException) {
    this.re = args;
    return;
  }
  if (args instanceof ttypes.TFaultException) {
    this.fe = args;
    return;
  }
  if (args instanceof ttypes.TUnverifiedConnectionException) {
    this.uce = args;
    return;
  }
  if (args instanceof ttypes.TProxyException) {
    this.pe = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgumentException) {
    this.iae = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.de !== undefined) {
      this.de = args.de;
    }
    if (args.re !== undefined) {
      this.re = args.re;
    }
    if (args.fe !== undefined) {
      this.fe = args.fe;
    }
    if (args.uce !== undefined) {
      this.uce = args.uce;
    }
    if (args.pe !== undefined) {
      this.pe = args.pe;
    }
    if (args.iae !== undefined) {
      this.iae = args.iae;
    }
  }
};
ONDB_deleteRow_result.prototype = {};
ONDB_deleteRow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TWriteResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.de = new ttypes.TDurabilityException();
        this.de.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.re = new ttypes.TRequestTimeoutException();
        this.re.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.fe = new ttypes.TFaultException();
        this.fe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.uce = new ttypes.TUnverifiedConnectionException();
        this.uce.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new ttypes.TProxyException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.iae = new ttypes.TIllegalArgumentException();
        this.iae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_deleteRow_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_deleteRow_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.de !== null && this.de !== undefined) {
    output.writeFieldBegin('de', Thrift.Type.STRUCT, 1);
    this.de.write(output);
    output.writeFieldEnd();
  }
  if (this.re !== null && this.re !== undefined) {
    output.writeFieldBegin('re', Thrift.Type.STRUCT, 2);
    this.re.write(output);
    output.writeFieldEnd();
  }
  if (this.fe !== null && this.fe !== undefined) {
    output.writeFieldBegin('fe', Thrift.Type.STRUCT, 3);
    this.fe.write(output);
    output.writeFieldEnd();
  }
  if (this.uce !== null && this.uce !== undefined) {
    output.writeFieldBegin('uce', Thrift.Type.STRUCT, 4);
    this.uce.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 5);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  if (this.iae !== null && this.iae !== undefined) {
    output.writeFieldBegin('iae', Thrift.Type.STRUCT, 6);
    this.iae.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ONDB_deleteRowIfVersion_args = function(args) {
  this.tableName = null;
  this.key = null;
  this.matchVersion = null;
  this.writeOptions = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.matchVersion !== undefined) {
      this.matchVersion = args.matchVersion;
    }
    if (args.writeOptions !== undefined) {
      this.writeOptions = args.writeOptions;
    }
  }
};
ONDB_deleteRowIfVersion_args.prototype = {};
ONDB_deleteRowIfVersion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.key = new ttypes.TRow();
        this.key.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.matchVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.writeOptions = new ttypes.TWriteOptions();
        this.writeOptions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_deleteRowIfVersion_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_deleteRowIfVersion_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRUCT, 2);
    this.key.write(output);
    output.writeFieldEnd();
  }
  if (this.matchVersion !== null && this.matchVersion !== undefined) {
    output.writeFieldBegin('matchVersion', Thrift.Type.STRING, 3);
    output.writeString(this.matchVersion);
    output.writeFieldEnd();
  }
  if (this.writeOptions !== null && this.writeOptions !== undefined) {
    output.writeFieldBegin('writeOptions', Thrift.Type.STRUCT, 4);
    this.writeOptions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ONDB_deleteRowIfVersion_result = function(args) {
  this.success = null;
  this.de = null;
  this.re = null;
  this.fe = null;
  this.uce = null;
  this.pe = null;
  this.iae = null;
  if (args instanceof ttypes.TDurabilityException) {
    this.de = args;
    return;
  }
  if (args instanceof ttypes.TRequestTimeoutException) {
    this.re = args;
    return;
  }
  if (args instanceof ttypes.TFaultException) {
    this.fe = args;
    return;
  }
  if (args instanceof ttypes.TUnverifiedConnectionException) {
    this.uce = args;
    return;
  }
  if (args instanceof ttypes.TProxyException) {
    this.pe = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgumentException) {
    this.iae = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.de !== undefined) {
      this.de = args.de;
    }
    if (args.re !== undefined) {
      this.re = args.re;
    }
    if (args.fe !== undefined) {
      this.fe = args.fe;
    }
    if (args.uce !== undefined) {
      this.uce = args.uce;
    }
    if (args.pe !== undefined) {
      this.pe = args.pe;
    }
    if (args.iae !== undefined) {
      this.iae = args.iae;
    }
  }
};
ONDB_deleteRowIfVersion_result.prototype = {};
ONDB_deleteRowIfVersion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TWriteResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.de = new ttypes.TDurabilityException();
        this.de.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.re = new ttypes.TRequestTimeoutException();
        this.re.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.fe = new ttypes.TFaultException();
        this.fe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.uce = new ttypes.TUnverifiedConnectionException();
        this.uce.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new ttypes.TProxyException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.iae = new ttypes.TIllegalArgumentException();
        this.iae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_deleteRowIfVersion_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_deleteRowIfVersion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.de !== null && this.de !== undefined) {
    output.writeFieldBegin('de', Thrift.Type.STRUCT, 1);
    this.de.write(output);
    output.writeFieldEnd();
  }
  if (this.re !== null && this.re !== undefined) {
    output.writeFieldBegin('re', Thrift.Type.STRUCT, 2);
    this.re.write(output);
    output.writeFieldEnd();
  }
  if (this.fe !== null && this.fe !== undefined) {
    output.writeFieldBegin('fe', Thrift.Type.STRUCT, 3);
    this.fe.write(output);
    output.writeFieldEnd();
  }
  if (this.uce !== null && this.uce !== undefined) {
    output.writeFieldBegin('uce', Thrift.Type.STRUCT, 4);
    this.uce.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 5);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  if (this.iae !== null && this.iae !== undefined) {
    output.writeFieldBegin('iae', Thrift.Type.STRUCT, 6);
    this.iae.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ONDB_multiDelete_args = function(args) {
  this.tableName = null;
  this.key = null;
  this.fieldRange = null;
  this.includedTable = null;
  this.writeOptions = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.fieldRange !== undefined) {
      this.fieldRange = args.fieldRange;
    }
    if (args.includedTable !== undefined) {
      this.includedTable = args.includedTable;
    }
    if (args.writeOptions !== undefined) {
      this.writeOptions = args.writeOptions;
    }
  }
};
ONDB_multiDelete_args.prototype = {};
ONDB_multiDelete_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.key = new ttypes.TRow();
        this.key.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.fieldRange = new ttypes.TFieldRange();
        this.fieldRange.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size52 = 0;
        var _rtmp356;
        this.includedTable = [];
        var _etype55 = 0;
        _rtmp356 = input.readListBegin();
        _etype55 = _rtmp356.etype;
        _size52 = _rtmp356.size;
        for (var _i57 = 0; _i57 < _size52; ++_i57)
        {
          var elem58 = null;
          elem58 = input.readString();
          this.includedTable.push(elem58);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.writeOptions = new ttypes.TWriteOptions();
        this.writeOptions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_multiDelete_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_multiDelete_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRUCT, 2);
    this.key.write(output);
    output.writeFieldEnd();
  }
  if (this.fieldRange !== null && this.fieldRange !== undefined) {
    output.writeFieldBegin('fieldRange', Thrift.Type.STRUCT, 3);
    this.fieldRange.write(output);
    output.writeFieldEnd();
  }
  if (this.includedTable !== null && this.includedTable !== undefined) {
    output.writeFieldBegin('includedTable', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.includedTable.length);
    for (var iter59 in this.includedTable)
    {
      if (this.includedTable.hasOwnProperty(iter59))
      {
        iter59 = this.includedTable[iter59];
        output.writeString(iter59);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.writeOptions !== null && this.writeOptions !== undefined) {
    output.writeFieldBegin('writeOptions', Thrift.Type.STRUCT, 5);
    this.writeOptions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ONDB_multiDelete_result = function(args) {
  this.success = null;
  this.de = null;
  this.re = null;
  this.fe = null;
  this.uce = null;
  this.pe = null;
  this.iae = null;
  if (args instanceof ttypes.TDurabilityException) {
    this.de = args;
    return;
  }
  if (args instanceof ttypes.TRequestTimeoutException) {
    this.re = args;
    return;
  }
  if (args instanceof ttypes.TFaultException) {
    this.fe = args;
    return;
  }
  if (args instanceof ttypes.TUnverifiedConnectionException) {
    this.uce = args;
    return;
  }
  if (args instanceof ttypes.TProxyException) {
    this.pe = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgumentException) {
    this.iae = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.de !== undefined) {
      this.de = args.de;
    }
    if (args.re !== undefined) {
      this.re = args.re;
    }
    if (args.fe !== undefined) {
      this.fe = args.fe;
    }
    if (args.uce !== undefined) {
      this.uce = args.uce;
    }
    if (args.pe !== undefined) {
      this.pe = args.pe;
    }
    if (args.iae !== undefined) {
      this.iae = args.iae;
    }
  }
};
ONDB_multiDelete_result.prototype = {};
ONDB_multiDelete_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.de = new ttypes.TDurabilityException();
        this.de.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.re = new ttypes.TRequestTimeoutException();
        this.re.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.fe = new ttypes.TFaultException();
        this.fe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.uce = new ttypes.TUnverifiedConnectionException();
        this.uce.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new ttypes.TProxyException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.iae = new ttypes.TIllegalArgumentException();
        this.iae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_multiDelete_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_multiDelete_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.de !== null && this.de !== undefined) {
    output.writeFieldBegin('de', Thrift.Type.STRUCT, 1);
    this.de.write(output);
    output.writeFieldEnd();
  }
  if (this.re !== null && this.re !== undefined) {
    output.writeFieldBegin('re', Thrift.Type.STRUCT, 2);
    this.re.write(output);
    output.writeFieldEnd();
  }
  if (this.fe !== null && this.fe !== undefined) {
    output.writeFieldBegin('fe', Thrift.Type.STRUCT, 3);
    this.fe.write(output);
    output.writeFieldEnd();
  }
  if (this.uce !== null && this.uce !== undefined) {
    output.writeFieldBegin('uce', Thrift.Type.STRUCT, 4);
    this.uce.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 5);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  if (this.iae !== null && this.iae !== undefined) {
    output.writeFieldBegin('iae', Thrift.Type.STRUCT, 6);
    this.iae.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ONDB_multiGet_args = function(args) {
  this.tableName = null;
  this.key = null;
  this.fieldRange = null;
  this.includedTables = null;
  this.readOptions = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.fieldRange !== undefined) {
      this.fieldRange = args.fieldRange;
    }
    if (args.includedTables !== undefined) {
      this.includedTables = args.includedTables;
    }
    if (args.readOptions !== undefined) {
      this.readOptions = args.readOptions;
    }
  }
};
ONDB_multiGet_args.prototype = {};
ONDB_multiGet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.key = new ttypes.TRow();
        this.key.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.fieldRange = new ttypes.TFieldRange();
        this.fieldRange.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size60 = 0;
        var _rtmp364;
        this.includedTables = [];
        var _etype63 = 0;
        _rtmp364 = input.readListBegin();
        _etype63 = _rtmp364.etype;
        _size60 = _rtmp364.size;
        for (var _i65 = 0; _i65 < _size60; ++_i65)
        {
          var elem66 = null;
          elem66 = input.readString();
          this.includedTables.push(elem66);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.readOptions = new ttypes.TReadOptions();
        this.readOptions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_multiGet_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_multiGet_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRUCT, 2);
    this.key.write(output);
    output.writeFieldEnd();
  }
  if (this.fieldRange !== null && this.fieldRange !== undefined) {
    output.writeFieldBegin('fieldRange', Thrift.Type.STRUCT, 3);
    this.fieldRange.write(output);
    output.writeFieldEnd();
  }
  if (this.includedTables !== null && this.includedTables !== undefined) {
    output.writeFieldBegin('includedTables', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.includedTables.length);
    for (var iter67 in this.includedTables)
    {
      if (this.includedTables.hasOwnProperty(iter67))
      {
        iter67 = this.includedTables[iter67];
        output.writeString(iter67);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.readOptions !== null && this.readOptions !== undefined) {
    output.writeFieldBegin('readOptions', Thrift.Type.STRUCT, 5);
    this.readOptions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ONDB_multiGet_result = function(args) {
  this.success = null;
  this.de = null;
  this.re = null;
  this.fe = null;
  this.uce = null;
  this.pe = null;
  this.iae = null;
  if (args instanceof ttypes.TConsistencyException) {
    this.de = args;
    return;
  }
  if (args instanceof ttypes.TRequestTimeoutException) {
    this.re = args;
    return;
  }
  if (args instanceof ttypes.TFaultException) {
    this.fe = args;
    return;
  }
  if (args instanceof ttypes.TUnverifiedConnectionException) {
    this.uce = args;
    return;
  }
  if (args instanceof ttypes.TProxyException) {
    this.pe = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgumentException) {
    this.iae = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.de !== undefined) {
      this.de = args.de;
    }
    if (args.re !== undefined) {
      this.re = args.re;
    }
    if (args.fe !== undefined) {
      this.fe = args.fe;
    }
    if (args.uce !== undefined) {
      this.uce = args.uce;
    }
    if (args.pe !== undefined) {
      this.pe = args.pe;
    }
    if (args.iae !== undefined) {
      this.iae = args.iae;
    }
  }
};
ONDB_multiGet_result.prototype = {};
ONDB_multiGet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TMultiGetResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.de = new ttypes.TConsistencyException();
        this.de.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.re = new ttypes.TRequestTimeoutException();
        this.re.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.fe = new ttypes.TFaultException();
        this.fe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.uce = new ttypes.TUnverifiedConnectionException();
        this.uce.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new ttypes.TProxyException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.iae = new ttypes.TIllegalArgumentException();
        this.iae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_multiGet_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_multiGet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.de !== null && this.de !== undefined) {
    output.writeFieldBegin('de', Thrift.Type.STRUCT, 1);
    this.de.write(output);
    output.writeFieldEnd();
  }
  if (this.re !== null && this.re !== undefined) {
    output.writeFieldBegin('re', Thrift.Type.STRUCT, 2);
    this.re.write(output);
    output.writeFieldEnd();
  }
  if (this.fe !== null && this.fe !== undefined) {
    output.writeFieldBegin('fe', Thrift.Type.STRUCT, 3);
    this.fe.write(output);
    output.writeFieldEnd();
  }
  if (this.uce !== null && this.uce !== undefined) {
    output.writeFieldBegin('uce', Thrift.Type.STRUCT, 4);
    this.uce.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 5);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  if (this.iae !== null && this.iae !== undefined) {
    output.writeFieldBegin('iae', Thrift.Type.STRUCT, 6);
    this.iae.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ONDB_multiGetKeys_args = function(args) {
  this.tableName = null;
  this.key = null;
  this.fieldRange = null;
  this.includedTables = null;
  this.readOptions = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.fieldRange !== undefined) {
      this.fieldRange = args.fieldRange;
    }
    if (args.includedTables !== undefined) {
      this.includedTables = args.includedTables;
    }
    if (args.readOptions !== undefined) {
      this.readOptions = args.readOptions;
    }
  }
};
ONDB_multiGetKeys_args.prototype = {};
ONDB_multiGetKeys_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.key = new ttypes.TRow();
        this.key.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.fieldRange = new ttypes.TFieldRange();
        this.fieldRange.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size68 = 0;
        var _rtmp372;
        this.includedTables = [];
        var _etype71 = 0;
        _rtmp372 = input.readListBegin();
        _etype71 = _rtmp372.etype;
        _size68 = _rtmp372.size;
        for (var _i73 = 0; _i73 < _size68; ++_i73)
        {
          var elem74 = null;
          elem74 = input.readString();
          this.includedTables.push(elem74);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.readOptions = new ttypes.TReadOptions();
        this.readOptions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_multiGetKeys_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_multiGetKeys_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRUCT, 2);
    this.key.write(output);
    output.writeFieldEnd();
  }
  if (this.fieldRange !== null && this.fieldRange !== undefined) {
    output.writeFieldBegin('fieldRange', Thrift.Type.STRUCT, 3);
    this.fieldRange.write(output);
    output.writeFieldEnd();
  }
  if (this.includedTables !== null && this.includedTables !== undefined) {
    output.writeFieldBegin('includedTables', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.includedTables.length);
    for (var iter75 in this.includedTables)
    {
      if (this.includedTables.hasOwnProperty(iter75))
      {
        iter75 = this.includedTables[iter75];
        output.writeString(iter75);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.readOptions !== null && this.readOptions !== undefined) {
    output.writeFieldBegin('readOptions', Thrift.Type.STRUCT, 5);
    this.readOptions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ONDB_multiGetKeys_result = function(args) {
  this.success = null;
  this.de = null;
  this.re = null;
  this.fe = null;
  this.uce = null;
  this.pe = null;
  this.iae = null;
  if (args instanceof ttypes.TConsistencyException) {
    this.de = args;
    return;
  }
  if (args instanceof ttypes.TRequestTimeoutException) {
    this.re = args;
    return;
  }
  if (args instanceof ttypes.TFaultException) {
    this.fe = args;
    return;
  }
  if (args instanceof ttypes.TUnverifiedConnectionException) {
    this.uce = args;
    return;
  }
  if (args instanceof ttypes.TProxyException) {
    this.pe = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgumentException) {
    this.iae = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.de !== undefined) {
      this.de = args.de;
    }
    if (args.re !== undefined) {
      this.re = args.re;
    }
    if (args.fe !== undefined) {
      this.fe = args.fe;
    }
    if (args.uce !== undefined) {
      this.uce = args.uce;
    }
    if (args.pe !== undefined) {
      this.pe = args.pe;
    }
    if (args.iae !== undefined) {
      this.iae = args.iae;
    }
  }
};
ONDB_multiGetKeys_result.prototype = {};
ONDB_multiGetKeys_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TMultiGetResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.de = new ttypes.TConsistencyException();
        this.de.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.re = new ttypes.TRequestTimeoutException();
        this.re.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.fe = new ttypes.TFaultException();
        this.fe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.uce = new ttypes.TUnverifiedConnectionException();
        this.uce.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new ttypes.TProxyException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.iae = new ttypes.TIllegalArgumentException();
        this.iae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_multiGetKeys_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_multiGetKeys_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.de !== null && this.de !== undefined) {
    output.writeFieldBegin('de', Thrift.Type.STRUCT, 1);
    this.de.write(output);
    output.writeFieldEnd();
  }
  if (this.re !== null && this.re !== undefined) {
    output.writeFieldBegin('re', Thrift.Type.STRUCT, 2);
    this.re.write(output);
    output.writeFieldEnd();
  }
  if (this.fe !== null && this.fe !== undefined) {
    output.writeFieldBegin('fe', Thrift.Type.STRUCT, 3);
    this.fe.write(output);
    output.writeFieldEnd();
  }
  if (this.uce !== null && this.uce !== undefined) {
    output.writeFieldBegin('uce', Thrift.Type.STRUCT, 4);
    this.uce.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 5);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  if (this.iae !== null && this.iae !== undefined) {
    output.writeFieldBegin('iae', Thrift.Type.STRUCT, 6);
    this.iae.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ONDBClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
ONDBClient.prototype = {};
ONDBClient.prototype.ping = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_ping();
};

ONDBClient.prototype.send_ping = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('ping', Thrift.MessageType.CALL, this.seqid);
  var args = new ONDB_ping_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ONDBClient.prototype.recv_ping = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_ping_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
ONDBClient.prototype.version = function(whichModule, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_version(whichModule);
};

ONDBClient.prototype.send_version = function(whichModule) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('version', Thrift.MessageType.CALL, this.seqid);
  var args = new ONDB_version_args();
  args.whichModule = whichModule;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ONDBClient.prototype.recv_version = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_version_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('version failed: unknown result');
};
ONDBClient.prototype.status = function(whichModule, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_status(whichModule);
};

ONDBClient.prototype.send_status = function(whichModule) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('status', Thrift.MessageType.CALL, this.seqid);
  var args = new ONDB_status_args();
  args.whichModule = whichModule;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ONDBClient.prototype.recv_status = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_status_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('status failed: unknown result');
};
ONDBClient.prototype.shutdown = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_shutdown();
};

ONDBClient.prototype.send_shutdown = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('shutdown', Thrift.MessageType.CALL, this.seqid);
  var args = new ONDB_shutdown_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};
ONDBClient.prototype.verify = function(properties, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_verify(properties);
};

ONDBClient.prototype.send_verify = function(properties) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('verify', Thrift.MessageType.CALL, this.seqid);
  var args = new ONDB_verify_args();
  args.properties = properties;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ONDBClient.prototype.recv_verify = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_verify_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('verify failed: unknown result');
};
ONDBClient.prototype.put = function(tableName, row, writeOptions, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_put(tableName, row, writeOptions);
};

ONDBClient.prototype.send_put = function(tableName, row, writeOptions) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('put', Thrift.MessageType.CALL, this.seqid);
  var args = new ONDB_put_args();
  args.tableName = tableName;
  args.row = row;
  args.writeOptions = writeOptions;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ONDBClient.prototype.recv_put = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_put_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.de) {
    return callback(result.de);
  }
  if (null !== result.re) {
    return callback(result.re);
  }
  if (null !== result.fe) {
    return callback(result.fe);
  }
  if (null !== result.uvce) {
    return callback(result.uvce);
  }
  if (null !== result.pe) {
    return callback(result.pe);
  }
  if (null !== result.iae) {
    return callback(result.iae);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('put failed: unknown result');
};
ONDBClient.prototype.putIfAbsent = function(tableName, row, writeOptions, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_putIfAbsent(tableName, row, writeOptions);
};

ONDBClient.prototype.send_putIfAbsent = function(tableName, row, writeOptions) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('putIfAbsent', Thrift.MessageType.CALL, this.seqid);
  var args = new ONDB_putIfAbsent_args();
  args.tableName = tableName;
  args.row = row;
  args.writeOptions = writeOptions;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ONDBClient.prototype.recv_putIfAbsent = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_putIfAbsent_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.de) {
    return callback(result.de);
  }
  if (null !== result.re) {
    return callback(result.re);
  }
  if (null !== result.fe) {
    return callback(result.fe);
  }
  if (null !== result.uvce) {
    return callback(result.uvce);
  }
  if (null !== result.pe) {
    return callback(result.pe);
  }
  if (null !== result.iae) {
    return callback(result.iae);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('putIfAbsent failed: unknown result');
};
ONDBClient.prototype.putIfPresent = function(tableName, row, writeOptions, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_putIfPresent(tableName, row, writeOptions);
};

ONDBClient.prototype.send_putIfPresent = function(tableName, row, writeOptions) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('putIfPresent', Thrift.MessageType.CALL, this.seqid);
  var args = new ONDB_putIfPresent_args();
  args.tableName = tableName;
  args.row = row;
  args.writeOptions = writeOptions;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ONDBClient.prototype.recv_putIfPresent = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_putIfPresent_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.de) {
    return callback(result.de);
  }
  if (null !== result.re) {
    return callback(result.re);
  }
  if (null !== result.fe) {
    return callback(result.fe);
  }
  if (null !== result.uvce) {
    return callback(result.uvce);
  }
  if (null !== result.pe) {
    return callback(result.pe);
  }
  if (null !== result.iae) {
    return callback(result.iae);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('putIfPresent failed: unknown result');
};
ONDBClient.prototype.putIfVersion = function(tableName, row, matchVersion, writeOptions, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_putIfVersion(tableName, row, matchVersion, writeOptions);
};

ONDBClient.prototype.send_putIfVersion = function(tableName, row, matchVersion, writeOptions) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('putIfVersion', Thrift.MessageType.CALL, this.seqid);
  var args = new ONDB_putIfVersion_args();
  args.tableName = tableName;
  args.row = row;
  args.matchVersion = matchVersion;
  args.writeOptions = writeOptions;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ONDBClient.prototype.recv_putIfVersion = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_putIfVersion_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.de) {
    return callback(result.de);
  }
  if (null !== result.re) {
    return callback(result.re);
  }
  if (null !== result.fe) {
    return callback(result.fe);
  }
  if (null !== result.uvce) {
    return callback(result.uvce);
  }
  if (null !== result.pe) {
    return callback(result.pe);
  }
  if (null !== result.iae) {
    return callback(result.iae);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('putIfVersion failed: unknown result');
};
ONDBClient.prototype.get = function(tableName, key, readOptions, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get(tableName, key, readOptions);
};

ONDBClient.prototype.send_get = function(tableName, key, readOptions) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get', Thrift.MessageType.CALL, this.seqid);
  var args = new ONDB_get_args();
  args.tableName = tableName;
  args.key = key;
  args.readOptions = readOptions;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ONDBClient.prototype.recv_get = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_get_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ce) {
    return callback(result.ce);
  }
  if (null !== result.re) {
    return callback(result.re);
  }
  if (null !== result.fe) {
    return callback(result.fe);
  }
  if (null !== result.uvce) {
    return callback(result.uvce);
  }
  if (null !== result.pe) {
    return callback(result.pe);
  }
  if (null !== result.iae) {
    return callback(result.iae);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get failed: unknown result');
};
ONDBClient.prototype.deleteRow = function(tableName, key, writeOptions, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_deleteRow(tableName, key, writeOptions);
};

ONDBClient.prototype.send_deleteRow = function(tableName, key, writeOptions) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteRow', Thrift.MessageType.CALL, this.seqid);
  var args = new ONDB_deleteRow_args();
  args.tableName = tableName;
  args.key = key;
  args.writeOptions = writeOptions;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ONDBClient.prototype.recv_deleteRow = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_deleteRow_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.de) {
    return callback(result.de);
  }
  if (null !== result.re) {
    return callback(result.re);
  }
  if (null !== result.fe) {
    return callback(result.fe);
  }
  if (null !== result.uce) {
    return callback(result.uce);
  }
  if (null !== result.pe) {
    return callback(result.pe);
  }
  if (null !== result.iae) {
    return callback(result.iae);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteRow failed: unknown result');
};
ONDBClient.prototype.deleteRowIfVersion = function(tableName, key, matchVersion, writeOptions, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_deleteRowIfVersion(tableName, key, matchVersion, writeOptions);
};

ONDBClient.prototype.send_deleteRowIfVersion = function(tableName, key, matchVersion, writeOptions) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteRowIfVersion', Thrift.MessageType.CALL, this.seqid);
  var args = new ONDB_deleteRowIfVersion_args();
  args.tableName = tableName;
  args.key = key;
  args.matchVersion = matchVersion;
  args.writeOptions = writeOptions;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ONDBClient.prototype.recv_deleteRowIfVersion = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_deleteRowIfVersion_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.de) {
    return callback(result.de);
  }
  if (null !== result.re) {
    return callback(result.re);
  }
  if (null !== result.fe) {
    return callback(result.fe);
  }
  if (null !== result.uce) {
    return callback(result.uce);
  }
  if (null !== result.pe) {
    return callback(result.pe);
  }
  if (null !== result.iae) {
    return callback(result.iae);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteRowIfVersion failed: unknown result');
};
ONDBClient.prototype.multiDelete = function(tableName, key, fieldRange, includedTable, writeOptions, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_multiDelete(tableName, key, fieldRange, includedTable, writeOptions);
};

ONDBClient.prototype.send_multiDelete = function(tableName, key, fieldRange, includedTable, writeOptions) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('multiDelete', Thrift.MessageType.CALL, this.seqid);
  var args = new ONDB_multiDelete_args();
  args.tableName = tableName;
  args.key = key;
  args.fieldRange = fieldRange;
  args.includedTable = includedTable;
  args.writeOptions = writeOptions;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ONDBClient.prototype.recv_multiDelete = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_multiDelete_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.de) {
    return callback(result.de);
  }
  if (null !== result.re) {
    return callback(result.re);
  }
  if (null !== result.fe) {
    return callback(result.fe);
  }
  if (null !== result.uce) {
    return callback(result.uce);
  }
  if (null !== result.pe) {
    return callback(result.pe);
  }
  if (null !== result.iae) {
    return callback(result.iae);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('multiDelete failed: unknown result');
};
ONDBClient.prototype.multiGet = function(tableName, key, fieldRange, includedTables, readOptions, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_multiGet(tableName, key, fieldRange, includedTables, readOptions);
};

ONDBClient.prototype.send_multiGet = function(tableName, key, fieldRange, includedTables, readOptions) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('multiGet', Thrift.MessageType.CALL, this.seqid);
  var args = new ONDB_multiGet_args();
  args.tableName = tableName;
  args.key = key;
  args.fieldRange = fieldRange;
  args.includedTables = includedTables;
  args.readOptions = readOptions;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ONDBClient.prototype.recv_multiGet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_multiGet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.de) {
    return callback(result.de);
  }
  if (null !== result.re) {
    return callback(result.re);
  }
  if (null !== result.fe) {
    return callback(result.fe);
  }
  if (null !== result.uce) {
    return callback(result.uce);
  }
  if (null !== result.pe) {
    return callback(result.pe);
  }
  if (null !== result.iae) {
    return callback(result.iae);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('multiGet failed: unknown result');
};
ONDBClient.prototype.multiGetKeys = function(tableName, key, fieldRange, includedTables, readOptions, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_multiGetKeys(tableName, key, fieldRange, includedTables, readOptions);
};

ONDBClient.prototype.send_multiGetKeys = function(tableName, key, fieldRange, includedTables, readOptions) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('multiGetKeys', Thrift.MessageType.CALL, this.seqid);
  var args = new ONDB_multiGetKeys_args();
  args.tableName = tableName;
  args.key = key;
  args.fieldRange = fieldRange;
  args.includedTables = includedTables;
  args.readOptions = readOptions;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ONDBClient.prototype.recv_multiGetKeys = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_multiGetKeys_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.de) {
    return callback(result.de);
  }
  if (null !== result.re) {
    return callback(result.re);
  }
  if (null !== result.fe) {
    return callback(result.fe);
  }
  if (null !== result.uce) {
    return callback(result.uce);
  }
  if (null !== result.pe) {
    return callback(result.pe);
  }
  if (null !== result.iae) {
    return callback(result.iae);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('multiGetKeys failed: unknown result');
};
ONDBProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
ONDBProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

ONDBProcessor.prototype.process_ping = function(seqid, input, output) {
  var args = new ONDB_ping_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.ping(function (err, result) {
    var result = new ONDB_ping_result((err != null ? err : {success: result}));
    output.writeMessageBegin("ping", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ONDBProcessor.prototype.process_version = function(seqid, input, output) {
  var args = new ONDB_version_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.version(args.whichModule, function (err, result) {
    var result = new ONDB_version_result((err != null ? err : {success: result}));
    output.writeMessageBegin("version", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ONDBProcessor.prototype.process_status = function(seqid, input, output) {
  var args = new ONDB_status_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.status(args.whichModule, function (err, result) {
    var result = new ONDB_status_result((err != null ? err : {success: result}));
    output.writeMessageBegin("status", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ONDBProcessor.prototype.process_shutdown = function(seqid, input, output) {
  var args = new ONDB_shutdown_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.shutdown()
}

ONDBProcessor.prototype.process_verify = function(seqid, input, output) {
  var args = new ONDB_verify_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.verify(args.properties, function (err, result) {
    var result = new ONDB_verify_result((err != null ? err : {success: result}));
    output.writeMessageBegin("verify", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ONDBProcessor.prototype.process_put = function(seqid, input, output) {
  var args = new ONDB_put_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.put(args.tableName, args.row, args.writeOptions, function (err, result) {
    var result = new ONDB_put_result((err != null ? err : {success: result}));
    output.writeMessageBegin("put", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ONDBProcessor.prototype.process_putIfAbsent = function(seqid, input, output) {
  var args = new ONDB_putIfAbsent_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.putIfAbsent(args.tableName, args.row, args.writeOptions, function (err, result) {
    var result = new ONDB_putIfAbsent_result((err != null ? err : {success: result}));
    output.writeMessageBegin("putIfAbsent", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ONDBProcessor.prototype.process_putIfPresent = function(seqid, input, output) {
  var args = new ONDB_putIfPresent_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.putIfPresent(args.tableName, args.row, args.writeOptions, function (err, result) {
    var result = new ONDB_putIfPresent_result((err != null ? err : {success: result}));
    output.writeMessageBegin("putIfPresent", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ONDBProcessor.prototype.process_putIfVersion = function(seqid, input, output) {
  var args = new ONDB_putIfVersion_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.putIfVersion(args.tableName, args.row, args.matchVersion, args.writeOptions, function (err, result) {
    var result = new ONDB_putIfVersion_result((err != null ? err : {success: result}));
    output.writeMessageBegin("putIfVersion", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ONDBProcessor.prototype.process_get = function(seqid, input, output) {
  var args = new ONDB_get_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.get(args.tableName, args.key, args.readOptions, function (err, result) {
    var result = new ONDB_get_result((err != null ? err : {success: result}));
    output.writeMessageBegin("get", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ONDBProcessor.prototype.process_deleteRow = function(seqid, input, output) {
  var args = new ONDB_deleteRow_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.deleteRow(args.tableName, args.key, args.writeOptions, function (err, result) {
    var result = new ONDB_deleteRow_result((err != null ? err : {success: result}));
    output.writeMessageBegin("deleteRow", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ONDBProcessor.prototype.process_deleteRowIfVersion = function(seqid, input, output) {
  var args = new ONDB_deleteRowIfVersion_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.deleteRowIfVersion(args.tableName, args.key, args.matchVersion, args.writeOptions, function (err, result) {
    var result = new ONDB_deleteRowIfVersion_result((err != null ? err : {success: result}));
    output.writeMessageBegin("deleteRowIfVersion", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ONDBProcessor.prototype.process_multiDelete = function(seqid, input, output) {
  var args = new ONDB_multiDelete_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.multiDelete(args.tableName, args.key, args.fieldRange, args.includedTable, args.writeOptions, function (err, result) {
    var result = new ONDB_multiDelete_result((err != null ? err : {success: result}));
    output.writeMessageBegin("multiDelete", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ONDBProcessor.prototype.process_multiGet = function(seqid, input, output) {
  var args = new ONDB_multiGet_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.multiGet(args.tableName, args.key, args.fieldRange, args.includedTables, args.readOptions, function (err, result) {
    var result = new ONDB_multiGet_result((err != null ? err : {success: result}));
    output.writeMessageBegin("multiGet", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ONDBProcessor.prototype.process_multiGetKeys = function(seqid, input, output) {
  var args = new ONDB_multiGetKeys_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.multiGetKeys(args.tableName, args.key, args.fieldRange, args.includedTables, args.readOptions, function (err, result) {
    var result = new ONDB_multiGetKeys_result((err != null ? err : {success: result}));
    output.writeMessageBegin("multiGetKeys", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

